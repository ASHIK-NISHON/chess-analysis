<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stockfish Analysis</title>
    <style>
        /* Analysis Container Styles */
        .analysis-container {
            position: fixed;
            right: 20px;
            top: 20px;
            width: 320px;
            z-index: 100;
            font-size: 0.8rem;
            transition: all 0.6s ease;
            opacity: 0.98;
            backdrop-filter: blur(10px);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 
                0 10px 25px rgba(0, 0, 0, 0.2),
                0 5px 10px rgba(0, 0, 0, 0.3),
                0 0 0 1px rgba(66, 133, 244, 0.1) inset;
        }

        .thinking .analysis-container {
            opacity: 1;
            transform: scale(1.02);
            box-shadow: 
                0 10px 30px rgba(66, 133, 244, 0.3),
                0 5px 15px rgba(0, 0, 0, 0.3),
                0 0 0 1px rgba(66, 133, 244, 0.2) inset;
        }

        .analysis-section {
            background: linear-gradient(145deg, rgba(40, 42, 54, 0.9), rgba(30, 30, 46, 0.9));
            border-radius: 12px;
            padding: 12px;
            color: #ffffff;
            margin-bottom: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(66, 133, 244, 0.2);
            position: relative;
            overflow: hidden;
        }

        .analysis-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at top right, 
                        rgba(66, 133, 244, 0.15), 
                        transparent 70%);
            pointer-events: none;
        }

        .analysis-box {
            background: linear-gradient(135deg, rgba(40, 42, 54, 0.8), rgba(30, 31, 40, 0.8));
            border-radius: 10px;
            padding: 8px;
            margin-top: 8px;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(66, 133, 244, 0.1);
        }

        .analysis-section-title {
            color: #81D4FA;
            font-weight: 600;
            margin-bottom: 6px;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
            text-transform: uppercase;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .analysis-section-title::after {
            content: '';
            flex-grow: 1;
            height: 1px;
            background: linear-gradient(90deg, rgba(66, 133, 244, 0.3), transparent);
            margin-left: 6px;
        }

        .mate-indicator {
            padding: 6px 8px;
            border-radius: 6px;
            font-weight: 600;
            margin: 6px 0;
            font-size: 0.85rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            animation: pulse-subtle 2s infinite alternate;
        }

        @keyframes pulse-subtle {
            0% { transform: scale(1); }
            100% { transform: scale(1.02); }
        }

        .mate-win {
            background: linear-gradient(135deg, rgba(76, 175, 80, 0.25), rgba(76, 175, 80, 0.15));
            color: #4CAF50;
            border-left: 3px solid #4CAF50;
        }

        .mate-loss {
            background: linear-gradient(135deg, rgba(244, 67, 54, 0.25), rgba(244, 67, 54, 0.15));
            color: #f44336;
            border-left: 3px solid #f44336;
        }

        .move-sequence {
            font-family: 'Roboto Mono', 'Courier New', monospace;
            white-space: pre-wrap;
            line-height: 1.7;
            font-size: 0.85rem;
            max-height: 60px;
            overflow-y: auto;
            padding: 6px 8px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 6px;
            color: #BBDEFB;
            border: 1px solid rgba(66, 133, 244, 0.1);
            scrollbar-width: thin;
            scrollbar-color: rgba(66, 133, 244, 0.3) rgba(0, 0, 0, 0.1);
        }

        .move-sequence::-webkit-scrollbar {
            width: 6px;
        }

        .move-sequence::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.1);
            border-radius: 3px;
        }

        .move-sequence::-webkit-scrollbar-thumb {
            background-color: rgba(66, 133, 244, 0.3);
            border-radius: 3px;
        }

        .eval-bar {
            height: 10px;
            background: rgba(10, 15, 30, 0.3);
            border-radius: 6px;
            margin: 8px 0;
            overflow: hidden;
            border: 1px solid rgba(66, 133, 244, 0.2);
            box-shadow: inset 0 1px 4px rgba(0, 0, 0, 0.3);
            position: relative;
        }

        .eval-progress {
            height: 100%;
            transition: width 0.6s cubic-bezier(0.165, 0.84, 0.44, 1), background-color 0.6s ease;
            box-shadow: 0 0 8px rgba(66, 133, 244, 0.6);
            position: relative;
            overflow: hidden;
        }

        .eval-progress::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, 
                        rgba(255, 255, 255, 0) 0%, 
                        rgba(255, 255, 255, 0.1) 50%, 
                        rgba(255, 255, 255, 0) 100%);
            animation: shine 2s infinite;
        }

        @keyframes shine {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .eval-positive {
            background: linear-gradient(90deg, #1e88e5, #64b5f6, #29b6f6);
        }

        .eval-negative {
            background: linear-gradient(90deg, #d81b60, #f06292, #ec407a);
        }

        .eval-neutral {
            background: linear-gradient(90deg, #5c6bc0, #7986cb, #9fa8da);
        }

        .best-move-highlight {
            background: linear-gradient(135deg, rgba(66, 133, 244, 0.2), rgba(66, 133, 244, 0.1));
            padding: 5px 10px;
            border-radius: 6px;
            font-weight: 600;
            display: inline-block;
            border: 1px solid rgba(66, 133, 244, 0.3);
            color: #81D4FA;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .loading {
            display: inline-block;
            width: 18px;
            height: 18px;
            border: 2px solid rgba(66, 133, 244, 0.2);
            border-radius: 50%;
            border-top-color: #4285F4;
            animation: spin 1s ease-in-out infinite;
            margin-left: 6px;
            box-shadow: 0 0 5px rgba(66, 133, 244, 0.3);
        }

        .analysis-title {
            color: #4FC3F7;
            padding-bottom: 8px;
            margin-top: 0;
            margin-bottom: 3px;
            font-size: 1.25rem;
            display: flex;
            align-items: center;
            gap: 5px;
            font-weight: 700;
            position: relative;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            background: linear-gradient(90deg, #4FC3F7, #81D4FA);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            letter-spacing: 0.3px;
        }

        .analysis-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 1px;
            background: linear-gradient(90deg, 
                        rgba(66, 133, 244, 0.4), 
                        rgba(66, 133, 244, 0.1),
                        transparent);
        }

        .stockfish-icon {
            width: 38px;
            height: 38px;
            object-fit: contain;
            margin-right: 12px;
            position: relative;
            left: -5px;
            animation: 
                subtle-float 4s ease-in-out infinite alternate,
                pulse-glow 3s ease-in-out infinite alternate;
        }

        @keyframes pulse-glow {
            0% {
                filter: drop-shadow(0 0 5px rgba(66, 133, 244, 0.4));
            }
            50% {
                filter: drop-shadow(0 0 12px rgba(66, 133, 244, 0.8));
            }
            100% {
                filter: drop-shadow(0 0 5px rgba(66, 133, 244, 0.4));
            }
        }

        @keyframes subtle-float {
            0% { transform: translateY(-1px); }
            100% { transform: translateY(1px); }
        }

        /* Improve analysis text styling */
        .analysis-section, .analysis-box {
            font-family: 'Poppins', 'Segoe UI', sans-serif;
            letter-spacing: 0.2px;
        }

        #evalText, #winProbText {
            font-weight: 500;
            font-size: 0.95rem;
            color: #E0F7FA;
            letter-spacing: 0.3px;
            padding: 3px 0;
            line-height: 1.5;
        }

        #bestMoveText {
            font-size: 1.2rem;
            margin: 4px 0;
            font-weight: 600;
            letter-spacing: 0.4px;
            color: #81D4FA;
        }

        #ponderMoveText {
            font-weight: 500;
            font-size: 0.95rem;
            color: #B3E5FC;
            padding: 3px 0;
            font-family: 'Roboto Mono', monospace;
            letter-spacing: 0.2px;
        }

        .analysis-section-title {
            font-family: 'Poppins', sans-serif;
            letter-spacing: 1px;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            font-size: 0.9rem;
            margin-bottom: 8px;
            color: #81D4FA;
            font-weight: 600;
        }

        #depthText, #nodesText, #npsText, #timeText {
            display: inline-block;
            padding: 2px 5px;
            background: rgba(66, 133, 244, 0.15);
            border-radius: 4px;
            margin: 0 2px;
            font-family: 'Roboto Mono', monospace;
            font-weight: 500;
            color: #E0F7FA;
            letter-spacing: 0.5px;
            border: 1px solid rgba(66, 133, 244, 0.2);
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .analysis-container {
                position: fixed;
                top: auto;
                bottom: 20px;
                right: 10px;
                width: 260px;
                font-size: 0.7rem;
                transform: none;
            }
            
            .thinking .analysis-container {
                transform: scale(1.02);
            }
        }
    </style>
</head>
<body>
    <!-- Analysis Panel -->
    <div class="analysis-container">
        <div class="analysis-section">
            <h3 class="analysis-title"><img src="stockfish.png" class="stockfish-icon" alt="Stockfish"> Stockfish Analysis</h3>
            <div class="analysis-box">
                <div class="analysis-section">
                    <div class="analysis-section-title">Evaluation <span id="loadingIndicator"></span></div>
                    <div id="evalText">Waiting for analysis...</div>
                    <div id="mateIndicator" class="mate-indicator" style="display: none;"></div>
                    <div class="eval-bar">
                        <div id="evalBar" class="eval-progress" style="width: 50%"></div>
                    </div>
                    <div id="winProbText">Win probability: -</div>
                </div>
                
                <div class="analysis-section">
                    <div class="analysis-section-title">Best Move</div>
                    <div id="bestMoveText">-</div>
                    <div><b>Expected Reply:</b> <span id="ponderMoveText">-</span></div>
                </div>
                
                <div class="analysis-section">
                    <div class="analysis-section-title">Search Information</div>
                    <div>Depth: <span id="depthText">0</span></div>
                    <div>Nodes: <span id="nodesText">0</span></div>
                    <div>Speed: <span id="npsText">0</span> nps</div>
                    <div>Time: <span id="timeText">0</span> ms</div>
                </div>
                
                <div class="analysis-section">
                    <div class="analysis-section-title">Predicted Lines</div>
                    <div id="pvMoves" class="move-sequence">-</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Analysis tracking variables
        let isBotThinking = false;
        let lastBotAnalysis = null;
        let analysisData = {
            scoreCp: 0,
            mateIn: null,
            depth: 0,
            nodes: 0,
            nps: 0,
            time: 0,
            pv: [],
            bestMove: null,
            ponderMove: null
        };

        // Initialize Stockfish engine
        const initializeEngine = () => {
            return new Promise((resolve) => {
                console.log("Initializing Stockfish engine");
                // Create a function to communicate with the Stockfish server
                engine = {
                    postMessage: async (message) => {

  
                                    // Process analysis data if available
                                    if (data.analysis && Array.isArray(data.analysis) && data.analysis.length > 0) {
                                        console.log('Processing analysis data:', data.analysis.length, 'lines');
                                        
                                        // Forward all analysis lines to the engine's onmessage handler
                                        data.analysis.forEach(line => {
                                            if (typeof engine.onmessage === 'function' && typeof line === 'string' && line.trim()) {
                                                engine.onmessage({ data: line });
                                            }
                                        });
                                    }
                                  
        // Function to process Stockfish analysis info
        function processAnalysisInfo(infoLine) {
            if (!infoLine.trim()) return;
            
            const parts = infoLine.split(' ');
            
            for (let i = 0; i < parts.length; i++) {
                switch(parts[i]) {
                    case 'depth':
                        analysisData.depth = parseInt(parts[++i]);
                        break;
                    case 'cp':
                        analysisData.scoreCp = parseInt(parts[++i]);
                        break;
                    case 'mate':
                        analysisData.mateIn = parseInt(parts[++i]);
                        break;
                    case 'nodes':
                        analysisData.nodes = parseInt(parts[++i]);
                        break;
                    case 'nps':
                        analysisData.nps = parseInt(parts[++i]);
                        break;
                    case 'time':
                        analysisData.time = parseInt(parts[++i]);
                        break;
                    case 'pv':
                        // Collect all moves in the principal variation
                        const pvMoves = [];
                        for (let j = i + 1; j < parts.length; j++) {
                            if (parts[j].match(/^[a-h][1-8][a-h][1-8][qrbnk]?$/)) {
                                pvMoves.push(parts[j]);
                            }
                        }
                        if (pvMoves.length > 0) {
                            analysisData.pv = pvMoves;
                            if (pvMoves.length > 1) {
                                analysisData.ponderMove = pvMoves[1];
                            }
                        }
                        break;
                }
            }
        }
        
        // Function to update the analysis UI with current data
        function updateAnalysisUI(data) {
            if (!data) return;

            // Check if analysis container exists, if not create it
            let analysisContainer = document.querySelector('.analysis-container');
            if (!analysisContainer) {
                createAnalysisContainer();
                analysisContainer = document.querySelector('.analysis-container');
            }
            
            // Update evaluation
            const evalText = document.getElementById('evalText');
            const mateIndicator = document.getElementById('mateIndicator');
            const evalBar = document.getElementById('evalBar');
            
            if (data.mateIn !== null) {
                mateIndicator.style.display = 'block';
                if (data.mateIn > 0) {
                    mateIndicator.className = 'mate-indicator mate-win';
                    mateIndicator.textContent = data.mateIn === 1 
                        ? `Checkmate available now!` 
                        : `Checkmate in ${data.mateIn} moves`;
                    evalBar.className = 'eval-progress eval-positive';
                    evalBar.style.width = '100%';
                    evalText.textContent = "Winning with forced mate";
                } else if (data.mateIn < 0) {
                    mateIndicator.className = 'mate-indicator mate-loss';
                    mateIndicator.textContent = data.mateIn === -1
                        ? `Checkmate threatened!`
                        : `Forced loss in ${Math.abs(data.mateIn)} moves`;
                    evalBar.className = 'eval-progress eval-negative';
                    evalBar.style.width = '0%';
                    evalText.textContent = "Losing to forced mate";
                }
            } else {
                mateIndicator.style.display = 'none';
                
                evalText.textContent = `Evaluation: ${(data.scoreCp / 100).toFixed(2)} pawns`;
                
                evalBar.className = 'eval-progress';
                if (data.scoreCp > 50) {
                    evalBar.classList.add('eval-positive');
                } else if (data.scoreCp < -50) {
                    evalBar.classList.add('eval-negative');
                } else {
                    evalBar.classList.add('eval-neutral');
                }
                
                const evalPercent = Math.min(Math.max((data.scoreCp + 500) / 10, 0), 100);
                evalBar.style.width = `${evalPercent}%`;
            }
            
            // Update win probability
            const winProb = data.mateIn !== null 
                ? (data.mateIn > 0 ? 100 : 0) 
                : 50 + (Math.atan(data.scoreCp / 100) * 28.6);
            document.getElementById('winProbText').textContent = `Win probability: ${winProb.toFixed(1)}%`;
            
            // Update best move display
            if (data.bestMove) {
                document.getElementById('bestMoveText').innerHTML = 
                    `<span class="best-move-highlight">${data.bestMove}</span>`;
            }
            
            // Update ponder move
            if (data.ponderMove) {
                document.getElementById('ponderMoveText').textContent = data.ponderMove;
            }
            
            // Update search info
            if (data.depth) document.getElementById('depthText').textContent = data.depth;
            if (data.nodes) document.getElementById('nodesText').textContent = data.nodes.toLocaleString();
            if (data.nps) document.getElementById('npsText').textContent = data.nps.toLocaleString();
            if (data.time) document.getElementById('timeText').textContent = data.time;
            
            // Update principal variation display
            if (data.pv && data.pv.length > 0) {
                let pvFormatted = "";
                for (let i = 0; i < data.pv.length; i++) {
                    if (i % 2 === 0) {
                        pvFormatted += `${Math.floor(i/2) + 1}. `;
                    }
                    pvFormatted += `${data.pv[i]} `;
                    if (i % 2 === 1) pvFormatted += "\n";
                }
                document.getElementById('pvMoves').textContent = pvFormatted.trim();
            }
            
            // Show loading indicator while thinking
            if (isBotThinking) {
                document.getElementById('loadingIndicator').innerHTML = '<span class="loading"></span>';
            } else {
                document.getElementById('loadingIndicator').textContent = '✓';
                setTimeout(() => {
                    document.getElementById('loadingIndicator').textContent = '';
                }, 2000);
            }
        }

        // Initialize the engine when the page loads
        document.addEventListener('DOMContentLoaded', async () => {
            await initializeEngine();
        });
    </script>
</body>
</html>
